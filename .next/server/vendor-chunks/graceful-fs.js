"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graceful-fs";
exports.ids = ["vendor-chunks/graceful-fs"];
exports.modules = {

/***/ "(rsc)/./node_modules/graceful-fs/clone.js":
/*!*******************************************!*\
  !*** ./node_modules/graceful-fs/clone.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\nmodule.exports = clone;\nvar getPrototypeOf = Object.getPrototypeOf || function(obj) {\n    return obj.__proto__;\n};\nfunction clone(obj) {\n    if (obj === null || typeof obj !== \"object\") return obj;\n    if (obj instanceof Object) var copy = {\n        __proto__: getPrototypeOf(obj)\n    };\n    else var copy = Object.create(null);\n    Object.getOwnPropertyNames(obj).forEach(function(key) {\n        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));\n    });\n    return copy;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvY2xvbmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxpQkFBaUJDLE9BQU9ELGNBQWMsSUFBSSxTQUFVRSxHQUFHO0lBQ3pELE9BQU9BLElBQUlDLFNBQVM7QUFDdEI7QUFFQSxTQUFTSixNQUFPRyxHQUFHO0lBQ2pCLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFVBQ2pDLE9BQU9BO0lBRVQsSUFBSUEsZUFBZUQsUUFDakIsSUFBSUcsT0FBTztRQUFFRCxXQUFXSCxlQUFlRTtJQUFLO1NBRTVDLElBQUlFLE9BQU9ILE9BQU9JLE1BQU0sQ0FBQztJQUUzQkosT0FBT0ssbUJBQW1CLENBQUNKLEtBQUtLLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1FBQ25EUCxPQUFPUSxjQUFjLENBQUNMLE1BQU1JLEtBQUtQLE9BQU9TLHdCQUF3QixDQUFDUixLQUFLTTtJQUN4RTtJQUVBLE9BQU9KO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saWZlcXVvdGUvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvY2xvbmUuanM/NjAwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVxuXG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqLl9fcHJvdG9fX1xufVxuXG5mdW5jdGlvbiBjbG9uZSAob2JqKSB7XG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpXG4gICAgcmV0dXJuIG9ialxuXG4gIGlmIChvYmogaW5zdGFuY2VvZiBPYmplY3QpXG4gICAgdmFyIGNvcHkgPSB7IF9fcHJvdG9fXzogZ2V0UHJvdG90eXBlT2Yob2JqKSB9XG4gIGVsc2VcbiAgICB2YXIgY29weSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb3B5LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpKVxuICB9KVxuXG4gIHJldHVybiBjb3B5XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNsb25lIiwiZ2V0UHJvdG90eXBlT2YiLCJPYmplY3QiLCJvYmoiLCJfX3Byb3RvX18iLCJjb3B5IiwiY3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graceful-fs/clone.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graceful-fs/graceful-fs.js":
/*!*************************************************!*\
  !*** ./node_modules/graceful-fs/graceful-fs.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar polyfills = __webpack_require__(/*! ./polyfills.js */ \"(rsc)/./node_modules/graceful-fs/polyfills.js\");\nvar legacy = __webpack_require__(/*! ./legacy-streams.js */ \"(rsc)/./node_modules/graceful-fs/legacy-streams.js\");\nvar clone = __webpack_require__(/*! ./clone.js */ \"(rsc)/./node_modules/graceful-fs/clone.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\n/* istanbul ignore next - node 0.x polyfill */ var gracefulQueue;\nvar previousSymbol;\n/* istanbul ignore else - node 0.x polyfill */ if (typeof Symbol === \"function\" && typeof Symbol.for === \"function\") {\n    gracefulQueue = Symbol.for(\"graceful-fs.queue\");\n    // This is used in testing by future versions\n    previousSymbol = Symbol.for(\"graceful-fs.previous\");\n} else {\n    gracefulQueue = \"___graceful-fs.queue\";\n    previousSymbol = \"___graceful-fs.previous\";\n}\nfunction noop() {}\nfunction publishQueue(context, queue) {\n    Object.defineProperty(context, gracefulQueue, {\n        get: function() {\n            return queue;\n        }\n    });\n}\nvar debug = noop;\nif (util.debuglog) debug = util.debuglog(\"gfs4\");\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || \"\")) debug = function() {\n    var m = util.format.apply(util, arguments);\n    m = \"GFS4: \" + m.split(/\\n/).join(\"\\nGFS4: \");\n    console.error(m);\n};\n// Once time initialization\nif (!fs[gracefulQueue]) {\n    // This queue can be shared by multiple loaded instances\n    var queue = global[gracefulQueue] || [];\n    publishQueue(fs, queue);\n    // Patch fs.close/closeSync to shared queue version, because we need\n    // to retry() whenever a close happens *anywhere* in the program.\n    // This is essential when multiple graceful-fs instances are\n    // in play at the same time.\n    fs.close = function(fs$close) {\n        function close(fd, cb) {\n            return fs$close.call(fs, fd, function(err) {\n                // This function uses the graceful-fs shared queue\n                if (!err) {\n                    resetQueue();\n                }\n                if (typeof cb === \"function\") cb.apply(this, arguments);\n            });\n        }\n        Object.defineProperty(close, previousSymbol, {\n            value: fs$close\n        });\n        return close;\n    }(fs.close);\n    fs.closeSync = function(fs$closeSync) {\n        function closeSync(fd) {\n            // This function uses the graceful-fs shared queue\n            fs$closeSync.apply(fs, arguments);\n            resetQueue();\n        }\n        Object.defineProperty(closeSync, previousSymbol, {\n            value: fs$closeSync\n        });\n        return closeSync;\n    }(fs.closeSync);\n    if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || \"\")) {\n        process.on(\"exit\", function() {\n            debug(fs[gracefulQueue]);\n            (__webpack_require__(/*! assert */ \"assert\").equal)(fs[gracefulQueue].length, 0);\n        });\n    }\n}\nif (!global[gracefulQueue]) {\n    publishQueue(global, fs[gracefulQueue]);\n}\nmodule.exports = patch(clone(fs));\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs);\n    fs.__patched = true;\n}\nfunction patch(fs) {\n    // Everything that references the open() function needs to be in here\n    polyfills(fs);\n    fs.gracefulify = patch;\n    fs.createReadStream = createReadStream;\n    fs.createWriteStream = createWriteStream;\n    var fs$readFile = fs.readFile;\n    fs.readFile = readFile;\n    function readFile(path, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$readFile(path, options, cb);\n        function go$readFile(path, options, cb, startTime) {\n            return fs$readFile(path, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$readFile,\n                    [\n                        path,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$writeFile = fs.writeFile;\n    fs.writeFile = writeFile;\n    function writeFile(path, data, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$writeFile(path, data, options, cb);\n        function go$writeFile(path, data, options, cb, startTime) {\n            return fs$writeFile(path, data, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$writeFile,\n                    [\n                        path,\n                        data,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$appendFile = fs.appendFile;\n    if (fs$appendFile) fs.appendFile = appendFile;\n    function appendFile(path, data, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$appendFile(path, data, options, cb);\n        function go$appendFile(path, data, options, cb, startTime) {\n            return fs$appendFile(path, data, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$appendFile,\n                    [\n                        path,\n                        data,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$copyFile = fs.copyFile;\n    if (fs$copyFile) fs.copyFile = copyFile;\n    function copyFile(src, dest, flags, cb) {\n        if (typeof flags === \"function\") {\n            cb = flags;\n            flags = 0;\n        }\n        return go$copyFile(src, dest, flags, cb);\n        function go$copyFile(src, dest, flags, cb, startTime) {\n            return fs$copyFile(src, dest, flags, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$copyFile,\n                    [\n                        src,\n                        dest,\n                        flags,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$readdir = fs.readdir;\n    fs.readdir = readdir;\n    var noReaddirOptionVersions = /^v[0-5]\\./;\n    function readdir(path, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir(path, options, cb, startTime) {\n            return fs$readdir(path, fs$readdirCallback(path, options, cb, startTime));\n        } : function go$readdir(path, options, cb, startTime) {\n            return fs$readdir(path, options, fs$readdirCallback(path, options, cb, startTime));\n        };\n        return go$readdir(path, options, cb);\n        function fs$readdirCallback(path, options, cb, startTime) {\n            return function(err, files) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$readdir,\n                    [\n                        path,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (files && files.sort) files.sort();\n                    if (typeof cb === \"function\") cb.call(this, err, files);\n                }\n            };\n        }\n    }\n    if (process.version.substr(0, 4) === \"v0.8\") {\n        var legStreams = legacy(fs);\n        ReadStream = legStreams.ReadStream;\n        WriteStream = legStreams.WriteStream;\n    }\n    var fs$ReadStream = fs.ReadStream;\n    if (fs$ReadStream) {\n        ReadStream.prototype = Object.create(fs$ReadStream.prototype);\n        ReadStream.prototype.open = ReadStream$open;\n    }\n    var fs$WriteStream = fs.WriteStream;\n    if (fs$WriteStream) {\n        WriteStream.prototype = Object.create(fs$WriteStream.prototype);\n        WriteStream.prototype.open = WriteStream$open;\n    }\n    Object.defineProperty(fs, \"ReadStream\", {\n        get: function() {\n            return ReadStream;\n        },\n        set: function(val) {\n            ReadStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(fs, \"WriteStream\", {\n        get: function() {\n            return WriteStream;\n        },\n        set: function(val) {\n            WriteStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // legacy names\n    var FileReadStream = ReadStream;\n    Object.defineProperty(fs, \"FileReadStream\", {\n        get: function() {\n            return FileReadStream;\n        },\n        set: function(val) {\n            FileReadStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    var FileWriteStream = WriteStream;\n    Object.defineProperty(fs, \"FileWriteStream\", {\n        get: function() {\n            return FileWriteStream;\n        },\n        set: function(val) {\n            FileWriteStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    function ReadStream(path, options) {\n        if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;\n        else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);\n    }\n    function ReadStream$open() {\n        var that = this;\n        open(that.path, that.flags, that.mode, function(err, fd) {\n            if (err) {\n                if (that.autoClose) that.destroy();\n                that.emit(\"error\", err);\n            } else {\n                that.fd = fd;\n                that.emit(\"open\", fd);\n                that.read();\n            }\n        });\n    }\n    function WriteStream(path, options) {\n        if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;\n        else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);\n    }\n    function WriteStream$open() {\n        var that = this;\n        open(that.path, that.flags, that.mode, function(err, fd) {\n            if (err) {\n                that.destroy();\n                that.emit(\"error\", err);\n            } else {\n                that.fd = fd;\n                that.emit(\"open\", fd);\n            }\n        });\n    }\n    function createReadStream(path, options) {\n        return new fs.ReadStream(path, options);\n    }\n    function createWriteStream(path, options) {\n        return new fs.WriteStream(path, options);\n    }\n    var fs$open = fs.open;\n    fs.open = open;\n    function open(path, flags, mode, cb) {\n        if (typeof mode === \"function\") cb = mode, mode = null;\n        return go$open(path, flags, mode, cb);\n        function go$open(path, flags, mode, cb, startTime) {\n            return fs$open(path, flags, mode, function(err, fd) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$open,\n                    [\n                        path,\n                        flags,\n                        mode,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    return fs;\n}\nfunction enqueue(elem) {\n    debug(\"ENQUEUE\", elem[0].name, elem[1]);\n    fs[gracefulQueue].push(elem);\n    retry();\n}\n// keep track of the timeout between retry() calls\nvar retryTimer;\n// reset the startTime and lastTime to now\n// this resets the start of the 60 second overall timeout as well as the\n// delay between attempts so that we'll retry these jobs sooner\nfunction resetQueue() {\n    var now = Date.now();\n    for(var i = 0; i < fs[gracefulQueue].length; ++i){\n        // entries that are only a length of 2 are from an older version, don't\n        // bother modifying those since they'll be retried anyway.\n        if (fs[gracefulQueue][i].length > 2) {\n            fs[gracefulQueue][i][3] = now // startTime\n            ;\n            fs[gracefulQueue][i][4] = now // lastTime\n            ;\n        }\n    }\n    // call retry to make sure we're actively processing the queue\n    retry();\n}\nfunction retry() {\n    // clear the timer and remove it to help prevent unintended concurrency\n    clearTimeout(retryTimer);\n    retryTimer = undefined;\n    if (fs[gracefulQueue].length === 0) return;\n    var elem = fs[gracefulQueue].shift();\n    var fn = elem[0];\n    var args = elem[1];\n    // these items may be unset if they were added by an older graceful-fs\n    var err = elem[2];\n    var startTime = elem[3];\n    var lastTime = elem[4];\n    // if we don't have a startTime we have no way of knowing if we've waited\n    // long enough, so go ahead and retry this item now\n    if (startTime === undefined) {\n        debug(\"RETRY\", fn.name, args);\n        fn.apply(null, args);\n    } else if (Date.now() - startTime >= 60000) {\n        // it's been more than 60 seconds total, bail now\n        debug(\"TIMEOUT\", fn.name, args);\n        var cb = args.pop();\n        if (typeof cb === \"function\") cb.call(null, err);\n    } else {\n        // the amount of time between the last attempt and right now\n        var sinceAttempt = Date.now() - lastTime;\n        // the amount of time between when we first tried, and when we last tried\n        // rounded up to at least 1\n        var sinceStart = Math.max(lastTime - startTime, 1);\n        // backoff. wait longer than the total time we've been retrying, but only\n        // up to a maximum of 100ms\n        var desiredDelay = Math.min(sinceStart * 1.2, 100);\n        // it's been long enough since the last retry, do it again\n        if (sinceAttempt >= desiredDelay) {\n            debug(\"RETRY\", fn.name, args);\n            fn.apply(null, args.concat([\n                startTime\n            ]));\n        } else {\n            // if we can't do this job yet, push it to the end of the queue\n            // and let the next iteration check again\n            fs[gracefulQueue].push(elem);\n        }\n    }\n    // schedule our next run if one isn't already scheduled\n    if (retryTimer === undefined) {\n        retryTimer = setTimeout(retry, 0);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvZ3JhY2VmdWwtZnMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ2pCLElBQUlDLFlBQVlELG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlFLFNBQVNGLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlHLFFBQVFILG1CQUFPQSxDQUFDO0FBRXBCLElBQUlJLE9BQU9KLG1CQUFPQSxDQUFDO0FBRW5CLDRDQUE0QyxHQUM1QyxJQUFJSztBQUNKLElBQUlDO0FBRUosNENBQTRDLEdBQzVDLElBQUksT0FBT0MsV0FBVyxjQUFjLE9BQU9BLE9BQU9DLEdBQUcsS0FBSyxZQUFZO0lBQ3BFSCxnQkFBZ0JFLE9BQU9DLEdBQUcsQ0FBQztJQUMzQiw2Q0FBNkM7SUFDN0NGLGlCQUFpQkMsT0FBT0MsR0FBRyxDQUFDO0FBQzlCLE9BQU87SUFDTEgsZ0JBQWdCO0lBQ2hCQyxpQkFBaUI7QUFDbkI7QUFFQSxTQUFTRyxRQUFTO0FBRWxCLFNBQVNDLGFBQWFDLE9BQU8sRUFBRUMsS0FBSztJQUNsQ0MsT0FBT0MsY0FBYyxDQUFDSCxTQUFTTixlQUFlO1FBQzVDVSxLQUFLO1lBQ0gsT0FBT0g7UUFDVDtJQUNGO0FBQ0Y7QUFFQSxJQUFJSSxRQUFRUDtBQUNaLElBQUlMLEtBQUthLFFBQVEsRUFDZkQsUUFBUVosS0FBS2EsUUFBUSxDQUFDO0tBQ25CLElBQUksWUFBWUMsSUFBSSxDQUFDQyxRQUFRQyxHQUFHLENBQUNDLFVBQVUsSUFBSSxLQUNsREwsUUFBUTtJQUNOLElBQUlNLElBQUlsQixLQUFLbUIsTUFBTSxDQUFDQyxLQUFLLENBQUNwQixNQUFNcUI7SUFDaENILElBQUksV0FBV0EsRUFBRUksS0FBSyxDQUFDLE1BQU1DLElBQUksQ0FBQztJQUNsQ0MsUUFBUUMsS0FBSyxDQUFDUDtBQUNoQjtBQUVGLDJCQUEyQjtBQUMzQixJQUFJLENBQUN2QixFQUFFLENBQUNNLGNBQWMsRUFBRTtJQUN0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L2xpZmVxdW90ZS8uL25vZGVfbW9kdWxlcy9ncmFjZWZ1bC1mcy9ncmFjZWZ1bC1mcy5qcz9lYTUwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcbnZhciBwb2x5ZmlsbHMgPSByZXF1aXJlKCcuL3BvbHlmaWxscy5qcycpXG52YXIgbGVnYWN5ID0gcmVxdWlyZSgnLi9sZWdhY3ktc3RyZWFtcy5qcycpXG52YXIgY2xvbmUgPSByZXF1aXJlKCcuL2Nsb25lLmpzJylcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJylcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgLSBub2RlIDAueCBwb2x5ZmlsbCAqL1xudmFyIGdyYWNlZnVsUXVldWVcbnZhciBwcmV2aW91c1N5bWJvbFxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAtIG5vZGUgMC54IHBvbHlmaWxsICovXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBncmFjZWZ1bFF1ZXVlID0gU3ltYm9sLmZvcignZ3JhY2VmdWwtZnMucXVldWUnKVxuICAvLyBUaGlzIGlzIHVzZWQgaW4gdGVzdGluZyBieSBmdXR1cmUgdmVyc2lvbnNcbiAgcHJldmlvdXNTeW1ib2wgPSBTeW1ib2wuZm9yKCdncmFjZWZ1bC1mcy5wcmV2aW91cycpXG59IGVsc2Uge1xuICBncmFjZWZ1bFF1ZXVlID0gJ19fX2dyYWNlZnVsLWZzLnF1ZXVlJ1xuICBwcmV2aW91c1N5bWJvbCA9ICdfX19ncmFjZWZ1bC1mcy5wcmV2aW91cydcbn1cblxuZnVuY3Rpb24gbm9vcCAoKSB7fVxuXG5mdW5jdGlvbiBwdWJsaXNoUXVldWUoY29udGV4dCwgcXVldWUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRleHQsIGdyYWNlZnVsUXVldWUsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHF1ZXVlXG4gICAgfVxuICB9KVxufVxuXG52YXIgZGVidWcgPSBub29wXG5pZiAodXRpbC5kZWJ1Z2xvZylcbiAgZGVidWcgPSB1dGlsLmRlYnVnbG9nKCdnZnM0JylcbmVsc2UgaWYgKC9cXGJnZnM0XFxiL2kudGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnKSlcbiAgZGVidWcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbSA9IHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIGFyZ3VtZW50cylcbiAgICBtID0gJ0dGUzQ6ICcgKyBtLnNwbGl0KC9cXG4vKS5qb2luKCdcXG5HRlM0OiAnKVxuICAgIGNvbnNvbGUuZXJyb3IobSlcbiAgfVxuXG4vLyBPbmNlIHRpbWUgaW5pdGlhbGl6YXRpb25cbmlmICghZnNbZ3JhY2VmdWxRdWV1ZV0pIHtcbiAgLy8gVGhpcyBxdWV1ZSBjYW4gYmUgc2hhcmVkIGJ5IG11bHRpcGxlIGxvYWRlZCBpbnN0YW5jZXNcbiAgdmFyIHF1ZXVlID0gZ2xvYmFsW2dyYWNlZnVsUXVldWVdIHx8IFtdXG4gIHB1Ymxpc2hRdWV1ZShmcywgcXVldWUpXG5cbiAgLy8gUGF0Y2ggZnMuY2xvc2UvY2xvc2VTeW5jIHRvIHNoYXJlZCBxdWV1ZSB2ZXJzaW9uLCBiZWNhdXNlIHdlIG5lZWRcbiAgLy8gdG8gcmV0cnkoKSB3aGVuZXZlciBhIGNsb3NlIGhhcHBlbnMgKmFueXdoZXJlKiBpbiB0aGUgcHJvZ3JhbS5cbiAgLy8gVGhpcyBpcyBlc3NlbnRpYWwgd2hlbiBtdWx0aXBsZSBncmFjZWZ1bC1mcyBpbnN0YW5jZXMgYXJlXG4gIC8vIGluIHBsYXkgYXQgdGhlIHNhbWUgdGltZS5cbiAgZnMuY2xvc2UgPSAoZnVuY3Rpb24gKGZzJGNsb3NlKSB7XG4gICAgZnVuY3Rpb24gY2xvc2UgKGZkLCBjYikge1xuICAgICAgcmV0dXJuIGZzJGNsb3NlLmNhbGwoZnMsIGZkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gdXNlcyB0aGUgZ3JhY2VmdWwtZnMgc2hhcmVkIHF1ZXVlXG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgcmVzZXRRdWV1ZSgpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb3NlLCBwcmV2aW91c1N5bWJvbCwge1xuICAgICAgdmFsdWU6IGZzJGNsb3NlXG4gICAgfSlcbiAgICByZXR1cm4gY2xvc2VcbiAgfSkoZnMuY2xvc2UpXG5cbiAgZnMuY2xvc2VTeW5jID0gKGZ1bmN0aW9uIChmcyRjbG9zZVN5bmMpIHtcbiAgICBmdW5jdGlvbiBjbG9zZVN5bmMgKGZkKSB7XG4gICAgICAvLyBUaGlzIGZ1bmN0aW9uIHVzZXMgdGhlIGdyYWNlZnVsLWZzIHNoYXJlZCBxdWV1ZVxuICAgICAgZnMkY2xvc2VTeW5jLmFwcGx5KGZzLCBhcmd1bWVudHMpXG4gICAgICByZXNldFF1ZXVlKClcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xvc2VTeW5jLCBwcmV2aW91c1N5bWJvbCwge1xuICAgICAgdmFsdWU6IGZzJGNsb3NlU3luY1xuICAgIH0pXG4gICAgcmV0dXJuIGNsb3NlU3luY1xuICB9KShmcy5jbG9zZVN5bmMpXG5cbiAgaWYgKC9cXGJnZnM0XFxiL2kudGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnKSkge1xuICAgIHByb2Nlc3Mub24oJ2V4aXQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKGZzW2dyYWNlZnVsUXVldWVdKVxuICAgICAgcmVxdWlyZSgnYXNzZXJ0JykuZXF1YWwoZnNbZ3JhY2VmdWxRdWV1ZV0ubGVuZ3RoLCAwKVxuICAgIH0pXG4gIH1cbn1cblxuaWYgKCFnbG9iYWxbZ3JhY2VmdWxRdWV1ZV0pIHtcbiAgcHVibGlzaFF1ZXVlKGdsb2JhbCwgZnNbZ3JhY2VmdWxRdWV1ZV0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoKGNsb25lKGZzKSlcbmlmIChwcm9jZXNzLmVudi5URVNUX0dSQUNFRlVMX0ZTX0dMT0JBTF9QQVRDSCAmJiAhZnMuX19wYXRjaGVkKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBwYXRjaChmcylcbiAgICBmcy5fX3BhdGNoZWQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBwYXRjaCAoZnMpIHtcbiAgLy8gRXZlcnl0aGluZyB0aGF0IHJlZmVyZW5jZXMgdGhlIG9wZW4oKSBmdW5jdGlvbiBuZWVkcyB0byBiZSBpbiBoZXJlXG4gIHBvbHlmaWxscyhmcylcbiAgZnMuZ3JhY2VmdWxpZnkgPSBwYXRjaFxuXG4gIGZzLmNyZWF0ZVJlYWRTdHJlYW0gPSBjcmVhdGVSZWFkU3RyZWFtXG4gIGZzLmNyZWF0ZVdyaXRlU3RyZWFtID0gY3JlYXRlV3JpdGVTdHJlYW1cbiAgdmFyIGZzJHJlYWRGaWxlID0gZnMucmVhZEZpbGVcbiAgZnMucmVhZEZpbGUgPSByZWFkRmlsZVxuICBmdW5jdGlvbiByZWFkRmlsZSAocGF0aCwgb3B0aW9ucywgY2IpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpXG4gICAgICBjYiA9IG9wdGlvbnMsIG9wdGlvbnMgPSBudWxsXG5cbiAgICByZXR1cm4gZ28kcmVhZEZpbGUocGF0aCwgb3B0aW9ucywgY2IpXG5cbiAgICBmdW5jdGlvbiBnbyRyZWFkRmlsZSAocGF0aCwgb3B0aW9ucywgY2IsIHN0YXJ0VGltZSkge1xuICAgICAgcmV0dXJuIGZzJHJlYWRGaWxlKHBhdGgsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciAmJiAoZXJyLmNvZGUgPT09ICdFTUZJTEUnIHx8IGVyci5jb2RlID09PSAnRU5GSUxFJykpXG4gICAgICAgICAgZW5xdWV1ZShbZ28kcmVhZEZpbGUsIFtwYXRoLCBvcHRpb25zLCBjYl0sIGVyciwgc3RhcnRUaW1lIHx8IERhdGUubm93KCksIERhdGUubm93KCldKVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHZhciBmcyR3cml0ZUZpbGUgPSBmcy53cml0ZUZpbGVcbiAgZnMud3JpdGVGaWxlID0gd3JpdGVGaWxlXG4gIGZ1bmN0aW9uIHdyaXRlRmlsZSAocGF0aCwgZGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpXG4gICAgICBjYiA9IG9wdGlvbnMsIG9wdGlvbnMgPSBudWxsXG5cbiAgICByZXR1cm4gZ28kd3JpdGVGaWxlKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGNiKVxuXG4gICAgZnVuY3Rpb24gZ28kd3JpdGVGaWxlIChwYXRoLCBkYXRhLCBvcHRpb25zLCBjYiwgc3RhcnRUaW1lKSB7XG4gICAgICByZXR1cm4gZnMkd3JpdGVGaWxlKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciAmJiAoZXJyLmNvZGUgPT09ICdFTUZJTEUnIHx8IGVyci5jb2RlID09PSAnRU5GSUxFJykpXG4gICAgICAgICAgZW5xdWV1ZShbZ28kd3JpdGVGaWxlLCBbcGF0aCwgZGF0YSwgb3B0aW9ucywgY2JdLCBlcnIsIHN0YXJ0VGltZSB8fCBEYXRlLm5vdygpLCBEYXRlLm5vdygpXSlcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICB2YXIgZnMkYXBwZW5kRmlsZSA9IGZzLmFwcGVuZEZpbGVcbiAgaWYgKGZzJGFwcGVuZEZpbGUpXG4gICAgZnMuYXBwZW5kRmlsZSA9IGFwcGVuZEZpbGVcbiAgZnVuY3Rpb24gYXBwZW5kRmlsZSAocGF0aCwgZGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpXG4gICAgICBjYiA9IG9wdGlvbnMsIG9wdGlvbnMgPSBudWxsXG5cbiAgICByZXR1cm4gZ28kYXBwZW5kRmlsZShwYXRoLCBkYXRhLCBvcHRpb25zLCBjYilcblxuICAgIGZ1bmN0aW9uIGdvJGFwcGVuZEZpbGUgKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGNiLCBzdGFydFRpbWUpIHtcbiAgICAgIHJldHVybiBmcyRhcHBlbmRGaWxlKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciAmJiAoZXJyLmNvZGUgPT09ICdFTUZJTEUnIHx8IGVyci5jb2RlID09PSAnRU5GSUxFJykpXG4gICAgICAgICAgZW5xdWV1ZShbZ28kYXBwZW5kRmlsZSwgW3BhdGgsIGRhdGEsIG9wdGlvbnMsIGNiXSwgZXJyLCBzdGFydFRpbWUgfHwgRGF0ZS5ub3coKSwgRGF0ZS5ub3coKV0pXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBjYi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgdmFyIGZzJGNvcHlGaWxlID0gZnMuY29weUZpbGVcbiAgaWYgKGZzJGNvcHlGaWxlKVxuICAgIGZzLmNvcHlGaWxlID0gY29weUZpbGVcbiAgZnVuY3Rpb24gY29weUZpbGUgKHNyYywgZGVzdCwgZmxhZ3MsIGNiKSB7XG4gICAgaWYgKHR5cGVvZiBmbGFncyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2IgPSBmbGFnc1xuICAgICAgZmxhZ3MgPSAwXG4gICAgfVxuICAgIHJldHVybiBnbyRjb3B5RmlsZShzcmMsIGRlc3QsIGZsYWdzLCBjYilcblxuICAgIGZ1bmN0aW9uIGdvJGNvcHlGaWxlIChzcmMsIGRlc3QsIGZsYWdzLCBjYiwgc3RhcnRUaW1lKSB7XG4gICAgICByZXR1cm4gZnMkY29weUZpbGUoc3JjLCBkZXN0LCBmbGFncywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyICYmIChlcnIuY29kZSA9PT0gJ0VNRklMRScgfHwgZXJyLmNvZGUgPT09ICdFTkZJTEUnKSlcbiAgICAgICAgICBlbnF1ZXVlKFtnbyRjb3B5RmlsZSwgW3NyYywgZGVzdCwgZmxhZ3MsIGNiXSwgZXJyLCBzdGFydFRpbWUgfHwgRGF0ZS5ub3coKSwgRGF0ZS5ub3coKV0pXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBjYi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgdmFyIGZzJHJlYWRkaXIgPSBmcy5yZWFkZGlyXG4gIGZzLnJlYWRkaXIgPSByZWFkZGlyXG4gIHZhciBub1JlYWRkaXJPcHRpb25WZXJzaW9ucyA9IC9edlswLTVdXFwuL1xuICBmdW5jdGlvbiByZWFkZGlyIChwYXRoLCBvcHRpb25zLCBjYikge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIGNiID0gb3B0aW9ucywgb3B0aW9ucyA9IG51bGxcblxuICAgIHZhciBnbyRyZWFkZGlyID0gbm9SZWFkZGlyT3B0aW9uVmVyc2lvbnMudGVzdChwcm9jZXNzLnZlcnNpb24pXG4gICAgICA/IGZ1bmN0aW9uIGdvJHJlYWRkaXIgKHBhdGgsIG9wdGlvbnMsIGNiLCBzdGFydFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZzJHJlYWRkaXIocGF0aCwgZnMkcmVhZGRpckNhbGxiYWNrKFxuICAgICAgICAgIHBhdGgsIG9wdGlvbnMsIGNiLCBzdGFydFRpbWVcbiAgICAgICAgKSlcbiAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24gZ28kcmVhZGRpciAocGF0aCwgb3B0aW9ucywgY2IsIHN0YXJ0VGltZSkge1xuICAgICAgICByZXR1cm4gZnMkcmVhZGRpcihwYXRoLCBvcHRpb25zLCBmcyRyZWFkZGlyQ2FsbGJhY2soXG4gICAgICAgICAgcGF0aCwgb3B0aW9ucywgY2IsIHN0YXJ0VGltZVxuICAgICAgICApKVxuICAgICAgfVxuXG4gICAgcmV0dXJuIGdvJHJlYWRkaXIocGF0aCwgb3B0aW9ucywgY2IpXG5cbiAgICBmdW5jdGlvbiBmcyRyZWFkZGlyQ2FsbGJhY2sgKHBhdGgsIG9wdGlvbnMsIGNiLCBzdGFydFRpbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyLCBmaWxlcykge1xuICAgICAgICBpZiAoZXJyICYmIChlcnIuY29kZSA9PT0gJ0VNRklMRScgfHwgZXJyLmNvZGUgPT09ICdFTkZJTEUnKSlcbiAgICAgICAgICBlbnF1ZXVlKFtcbiAgICAgICAgICAgIGdvJHJlYWRkaXIsXG4gICAgICAgICAgICBbcGF0aCwgb3B0aW9ucywgY2JdLFxuICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgc3RhcnRUaW1lIHx8IERhdGUubm93KCksXG4gICAgICAgICAgICBEYXRlLm5vdygpXG4gICAgICAgICAgXSlcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKGZpbGVzICYmIGZpbGVzLnNvcnQpXG4gICAgICAgICAgICBmaWxlcy5zb3J0KClcblxuICAgICAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBjYi5jYWxsKHRoaXMsIGVyciwgZmlsZXMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy52ZXJzaW9uLnN1YnN0cigwLCA0KSA9PT0gJ3YwLjgnKSB7XG4gICAgdmFyIGxlZ1N0cmVhbXMgPSBsZWdhY3koZnMpXG4gICAgUmVhZFN0cmVhbSA9IGxlZ1N0cmVhbXMuUmVhZFN0cmVhbVxuICAgIFdyaXRlU3RyZWFtID0gbGVnU3RyZWFtcy5Xcml0ZVN0cmVhbVxuICB9XG5cbiAgdmFyIGZzJFJlYWRTdHJlYW0gPSBmcy5SZWFkU3RyZWFtXG4gIGlmIChmcyRSZWFkU3RyZWFtKSB7XG4gICAgUmVhZFN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGZzJFJlYWRTdHJlYW0ucHJvdG90eXBlKVxuICAgIFJlYWRTdHJlYW0ucHJvdG90eXBlLm9wZW4gPSBSZWFkU3RyZWFtJG9wZW5cbiAgfVxuXG4gIHZhciBmcyRXcml0ZVN0cmVhbSA9IGZzLldyaXRlU3RyZWFtXG4gIGlmIChmcyRXcml0ZVN0cmVhbSkge1xuICAgIFdyaXRlU3RyZWFtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZnMkV3JpdGVTdHJlYW0ucHJvdG90eXBlKVxuICAgIFdyaXRlU3RyZWFtLnByb3RvdHlwZS5vcGVuID0gV3JpdGVTdHJlYW0kb3BlblxuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZzLCAnUmVhZFN0cmVhbScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBSZWFkU3RyZWFtXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIFJlYWRTdHJlYW0gPSB2YWxcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmcywgJ1dyaXRlU3RyZWFtJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFdyaXRlU3RyZWFtXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIFdyaXRlU3RyZWFtID0gdmFsXG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxuXG4gIC8vIGxlZ2FjeSBuYW1lc1xuICB2YXIgRmlsZVJlYWRTdHJlYW0gPSBSZWFkU3RyZWFtXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmcywgJ0ZpbGVSZWFkU3RyZWFtJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEZpbGVSZWFkU3RyZWFtXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIEZpbGVSZWFkU3RyZWFtID0gdmFsXG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxuICB2YXIgRmlsZVdyaXRlU3RyZWFtID0gV3JpdGVTdHJlYW1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZzLCAnRmlsZVdyaXRlU3RyZWFtJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEZpbGVXcml0ZVN0cmVhbVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBGaWxlV3JpdGVTdHJlYW0gPSB2YWxcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pXG5cbiAgZnVuY3Rpb24gUmVhZFN0cmVhbSAocGF0aCwgb3B0aW9ucykge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgUmVhZFN0cmVhbSlcbiAgICAgIHJldHVybiBmcyRSZWFkU3RyZWFtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXNcbiAgICBlbHNlXG4gICAgICByZXR1cm4gUmVhZFN0cmVhbS5hcHBseShPYmplY3QuY3JlYXRlKFJlYWRTdHJlYW0ucHJvdG90eXBlKSwgYXJndW1lbnRzKVxuICB9XG5cbiAgZnVuY3Rpb24gUmVhZFN0cmVhbSRvcGVuICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICBvcGVuKHRoYXQucGF0aCwgdGhhdC5mbGFncywgdGhhdC5tb2RlLCBmdW5jdGlvbiAoZXJyLCBmZCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAodGhhdC5hdXRvQ2xvc2UpXG4gICAgICAgICAgdGhhdC5kZXN0cm95KClcblxuICAgICAgICB0aGF0LmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhhdC5mZCA9IGZkXG4gICAgICAgIHRoYXQuZW1pdCgnb3BlbicsIGZkKVxuICAgICAgICB0aGF0LnJlYWQoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBXcml0ZVN0cmVhbSAocGF0aCwgb3B0aW9ucykge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgV3JpdGVTdHJlYW0pXG4gICAgICByZXR1cm4gZnMkV3JpdGVTdHJlYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdGhpc1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBXcml0ZVN0cmVhbS5hcHBseShPYmplY3QuY3JlYXRlKFdyaXRlU3RyZWFtLnByb3RvdHlwZSksIGFyZ3VtZW50cylcbiAgfVxuXG4gIGZ1bmN0aW9uIFdyaXRlU3RyZWFtJG9wZW4gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIG9wZW4odGhhdC5wYXRoLCB0aGF0LmZsYWdzLCB0aGF0Lm1vZGUsIGZ1bmN0aW9uIChlcnIsIGZkKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRoYXQuZGVzdHJveSgpXG4gICAgICAgIHRoYXQuZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGF0LmZkID0gZmRcbiAgICAgICAgdGhhdC5lbWl0KCdvcGVuJywgZmQpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJlYWRTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IGZzLlJlYWRTdHJlYW0ocGF0aCwgb3B0aW9ucylcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVdyaXRlU3RyZWFtIChwYXRoLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBmcy5Xcml0ZVN0cmVhbShwYXRoLCBvcHRpb25zKVxuICB9XG5cbiAgdmFyIGZzJG9wZW4gPSBmcy5vcGVuXG4gIGZzLm9wZW4gPSBvcGVuXG4gIGZ1bmN0aW9uIG9wZW4gKHBhdGgsIGZsYWdzLCBtb2RlLCBjYikge1xuICAgIGlmICh0eXBlb2YgbW9kZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIGNiID0gbW9kZSwgbW9kZSA9IG51bGxcblxuICAgIHJldHVybiBnbyRvcGVuKHBhdGgsIGZsYWdzLCBtb2RlLCBjYilcblxuICAgIGZ1bmN0aW9uIGdvJG9wZW4gKHBhdGgsIGZsYWdzLCBtb2RlLCBjYiwgc3RhcnRUaW1lKSB7XG4gICAgICByZXR1cm4gZnMkb3BlbihwYXRoLCBmbGFncywgbW9kZSwgZnVuY3Rpb24gKGVyciwgZmQpIHtcbiAgICAgICAgaWYgKGVyciAmJiAoZXJyLmNvZGUgPT09ICdFTUZJTEUnIHx8IGVyci5jb2RlID09PSAnRU5GSUxFJykpXG4gICAgICAgICAgZW5xdWV1ZShbZ28kb3BlbiwgW3BhdGgsIGZsYWdzLCBtb2RlLCBjYl0sIGVyciwgc3RhcnRUaW1lIHx8IERhdGUubm93KCksIERhdGUubm93KCldKVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmc1xufVxuXG5mdW5jdGlvbiBlbnF1ZXVlIChlbGVtKSB7XG4gIGRlYnVnKCdFTlFVRVVFJywgZWxlbVswXS5uYW1lLCBlbGVtWzFdKVxuICBmc1tncmFjZWZ1bFF1ZXVlXS5wdXNoKGVsZW0pXG4gIHJldHJ5KClcbn1cblxuLy8ga2VlcCB0cmFjayBvZiB0aGUgdGltZW91dCBiZXR3ZWVuIHJldHJ5KCkgY2FsbHNcbnZhciByZXRyeVRpbWVyXG5cbi8vIHJlc2V0IHRoZSBzdGFydFRpbWUgYW5kIGxhc3RUaW1lIHRvIG5vd1xuLy8gdGhpcyByZXNldHMgdGhlIHN0YXJ0IG9mIHRoZSA2MCBzZWNvbmQgb3ZlcmFsbCB0aW1lb3V0IGFzIHdlbGwgYXMgdGhlXG4vLyBkZWxheSBiZXR3ZWVuIGF0dGVtcHRzIHNvIHRoYXQgd2UnbGwgcmV0cnkgdGhlc2Ugam9icyBzb29uZXJcbmZ1bmN0aW9uIHJlc2V0UXVldWUgKCkge1xuICB2YXIgbm93ID0gRGF0ZS5ub3coKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZzW2dyYWNlZnVsUXVldWVdLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gZW50cmllcyB0aGF0IGFyZSBvbmx5IGEgbGVuZ3RoIG9mIDIgYXJlIGZyb20gYW4gb2xkZXIgdmVyc2lvbiwgZG9uJ3RcbiAgICAvLyBib3RoZXIgbW9kaWZ5aW5nIHRob3NlIHNpbmNlIHRoZXknbGwgYmUgcmV0cmllZCBhbnl3YXkuXG4gICAgaWYgKGZzW2dyYWNlZnVsUXVldWVdW2ldLmxlbmd0aCA+IDIpIHtcbiAgICAgIGZzW2dyYWNlZnVsUXVldWVdW2ldWzNdID0gbm93IC8vIHN0YXJ0VGltZVxuICAgICAgZnNbZ3JhY2VmdWxRdWV1ZV1baV1bNF0gPSBub3cgLy8gbGFzdFRpbWVcbiAgICB9XG4gIH1cbiAgLy8gY2FsbCByZXRyeSB0byBtYWtlIHN1cmUgd2UncmUgYWN0aXZlbHkgcHJvY2Vzc2luZyB0aGUgcXVldWVcbiAgcmV0cnkoKVxufVxuXG5mdW5jdGlvbiByZXRyeSAoKSB7XG4gIC8vIGNsZWFyIHRoZSB0aW1lciBhbmQgcmVtb3ZlIGl0IHRvIGhlbHAgcHJldmVudCB1bmludGVuZGVkIGNvbmN1cnJlbmN5XG4gIGNsZWFyVGltZW91dChyZXRyeVRpbWVyKVxuICByZXRyeVRpbWVyID0gdW5kZWZpbmVkXG5cbiAgaWYgKGZzW2dyYWNlZnVsUXVldWVdLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm5cblxuICB2YXIgZWxlbSA9IGZzW2dyYWNlZnVsUXVldWVdLnNoaWZ0KClcbiAgdmFyIGZuID0gZWxlbVswXVxuICB2YXIgYXJncyA9IGVsZW1bMV1cbiAgLy8gdGhlc2UgaXRlbXMgbWF5IGJlIHVuc2V0IGlmIHRoZXkgd2VyZSBhZGRlZCBieSBhbiBvbGRlciBncmFjZWZ1bC1mc1xuICB2YXIgZXJyID0gZWxlbVsyXVxuICB2YXIgc3RhcnRUaW1lID0gZWxlbVszXVxuICB2YXIgbGFzdFRpbWUgPSBlbGVtWzRdXG5cbiAgLy8gaWYgd2UgZG9uJ3QgaGF2ZSBhIHN0YXJ0VGltZSB3ZSBoYXZlIG5vIHdheSBvZiBrbm93aW5nIGlmIHdlJ3ZlIHdhaXRlZFxuICAvLyBsb25nIGVub3VnaCwgc28gZ28gYWhlYWQgYW5kIHJldHJ5IHRoaXMgaXRlbSBub3dcbiAgaWYgKHN0YXJ0VGltZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVidWcoJ1JFVFJZJywgZm4ubmFtZSwgYXJncylcbiAgICBmbi5hcHBseShudWxsLCBhcmdzKVxuICB9IGVsc2UgaWYgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPj0gNjAwMDApIHtcbiAgICAvLyBpdCdzIGJlZW4gbW9yZSB0aGFuIDYwIHNlY29uZHMgdG90YWwsIGJhaWwgbm93XG4gICAgZGVidWcoJ1RJTUVPVVQnLCBmbi5uYW1lLCBhcmdzKVxuICAgIHZhciBjYiA9IGFyZ3MucG9wKClcbiAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKVxuICAgICAgY2IuY2FsbChudWxsLCBlcnIpXG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGFtb3VudCBvZiB0aW1lIGJldHdlZW4gdGhlIGxhc3QgYXR0ZW1wdCBhbmQgcmlnaHQgbm93XG4gICAgdmFyIHNpbmNlQXR0ZW1wdCA9IERhdGUubm93KCkgLSBsYXN0VGltZVxuICAgIC8vIHRoZSBhbW91bnQgb2YgdGltZSBiZXR3ZWVuIHdoZW4gd2UgZmlyc3QgdHJpZWQsIGFuZCB3aGVuIHdlIGxhc3QgdHJpZWRcbiAgICAvLyByb3VuZGVkIHVwIHRvIGF0IGxlYXN0IDFcbiAgICB2YXIgc2luY2VTdGFydCA9IE1hdGgubWF4KGxhc3RUaW1lIC0gc3RhcnRUaW1lLCAxKVxuICAgIC8vIGJhY2tvZmYuIHdhaXQgbG9uZ2VyIHRoYW4gdGhlIHRvdGFsIHRpbWUgd2UndmUgYmVlbiByZXRyeWluZywgYnV0IG9ubHlcbiAgICAvLyB1cCB0byBhIG1heGltdW0gb2YgMTAwbXNcbiAgICB2YXIgZGVzaXJlZERlbGF5ID0gTWF0aC5taW4oc2luY2VTdGFydCAqIDEuMiwgMTAwKVxuICAgIC8vIGl0J3MgYmVlbiBsb25nIGVub3VnaCBzaW5jZSB0aGUgbGFzdCByZXRyeSwgZG8gaXQgYWdhaW5cbiAgICBpZiAoc2luY2VBdHRlbXB0ID49IGRlc2lyZWREZWxheSkge1xuICAgICAgZGVidWcoJ1JFVFJZJywgZm4ubmFtZSwgYXJncylcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MuY29uY2F0KFtzdGFydFRpbWVdKSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgd2UgY2FuJ3QgZG8gdGhpcyBqb2IgeWV0LCBwdXNoIGl0IHRvIHRoZSBlbmQgb2YgdGhlIHF1ZXVlXG4gICAgICAvLyBhbmQgbGV0IHRoZSBuZXh0IGl0ZXJhdGlvbiBjaGVjayBhZ2FpblxuICAgICAgZnNbZ3JhY2VmdWxRdWV1ZV0ucHVzaChlbGVtKVxuICAgIH1cbiAgfVxuXG4gIC8vIHNjaGVkdWxlIG91ciBuZXh0IHJ1biBpZiBvbmUgaXNuJ3QgYWxyZWFkeSBzY2hlZHVsZWRcbiAgaWYgKHJldHJ5VGltZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHJ5VGltZXIgPSBzZXRUaW1lb3V0KHJldHJ5LCAwKVxuICB9XG59XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicG9seWZpbGxzIiwibGVnYWN5IiwiY2xvbmUiLCJ1dGlsIiwiZ3JhY2VmdWxRdWV1ZSIsInByZXZpb3VzU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwibm9vcCIsInB1Ymxpc2hRdWV1ZSIsImNvbnRleHQiLCJxdWV1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZGVidWciLCJkZWJ1Z2xvZyIsInRlc3QiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9ERUJVRyIsIm0iLCJmb3JtYXQiLCJhcHBseSIsImFyZ3VtZW50cyIsInNwbGl0Iiwiam9pbiIsImNvbnNvbGUiLCJlcnJvciIsImdsb2JhbCIsImNsb3NlIiwiZnMkY2xvc2UiLCJmZCIsImNiIiwiY2FsbCIsImVyciIsInJlc2V0UXVldWUiLCJ2YWx1ZSIsImNsb3NlU3luYyIsImZzJGNsb3NlU3luYyIsIm9uIiwiZXF1YWwiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIiwicGF0Y2giLCJURVNUX0dSQUNFRlVMX0ZTX0dMT0JBTF9QQVRDSCIsIl9fcGF0Y2hlZCIsImdyYWNlZnVsaWZ5IiwiY3JlYXRlUmVhZFN0cmVhbSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiZnMkcmVhZEZpbGUiLCJyZWFkRmlsZSIsInBhdGgiLCJvcHRpb25zIiwiZ28kcmVhZEZpbGUiLCJzdGFydFRpbWUiLCJjb2RlIiwiZW5xdWV1ZSIsIkRhdGUiLCJub3ciLCJmcyR3cml0ZUZpbGUiLCJ3cml0ZUZpbGUiLCJkYXRhIiwiZ28kd3JpdGVGaWxlIiwiZnMkYXBwZW5kRmlsZSIsImFwcGVuZEZpbGUiLCJnbyRhcHBlbmRGaWxlIiwiZnMkY29weUZpbGUiLCJjb3B5RmlsZSIsInNyYyIsImRlc3QiLCJmbGFncyIsImdvJGNvcHlGaWxlIiwiZnMkcmVhZGRpciIsInJlYWRkaXIiLCJub1JlYWRkaXJPcHRpb25WZXJzaW9ucyIsImdvJHJlYWRkaXIiLCJ2ZXJzaW9uIiwiZnMkcmVhZGRpckNhbGxiYWNrIiwiZmlsZXMiLCJzb3J0Iiwic3Vic3RyIiwibGVnU3RyZWFtcyIsIlJlYWRTdHJlYW0iLCJXcml0ZVN0cmVhbSIsImZzJFJlYWRTdHJlYW0iLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJvcGVuIiwiUmVhZFN0cmVhbSRvcGVuIiwiZnMkV3JpdGVTdHJlYW0iLCJXcml0ZVN0cmVhbSRvcGVuIiwic2V0IiwidmFsIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIkZpbGVSZWFkU3RyZWFtIiwiRmlsZVdyaXRlU3RyZWFtIiwidGhhdCIsIm1vZGUiLCJhdXRvQ2xvc2UiLCJkZXN0cm95IiwiZW1pdCIsInJlYWQiLCJmcyRvcGVuIiwiZ28kb3BlbiIsImVsZW0iLCJuYW1lIiwicHVzaCIsInJldHJ5IiwicmV0cnlUaW1lciIsImkiLCJjbGVhclRpbWVvdXQiLCJ1bmRlZmluZWQiLCJzaGlmdCIsImZuIiwiYXJncyIsImxhc3RUaW1lIiwicG9wIiwic2luY2VBdHRlbXB0Iiwic2luY2VTdGFydCIsIk1hdGgiLCJtYXgiLCJkZXNpcmVkRGVsYXkiLCJtaW4iLCJjb25jYXQiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graceful-fs/graceful-fs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graceful-fs/legacy-streams.js":
/*!****************************************************!*\
  !*** ./node_modules/graceful-fs/legacy-streams.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nmodule.exports = legacy;\nfunction legacy(fs) {\n    return {\n        ReadStream: ReadStream,\n        WriteStream: WriteStream\n    };\n    function ReadStream(path, options) {\n        if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n        Stream.call(this);\n        var self = this;\n        this.path = path;\n        this.fd = null;\n        this.readable = true;\n        this.paused = false;\n        this.flags = \"r\";\n        this.mode = 438; /*=0666*/ \n        this.bufferSize = 64 * 1024;\n        options = options || {};\n        // Mixin options into this\n        var keys = Object.keys(options);\n        for(var index = 0, length = keys.length; index < length; index++){\n            var key = keys[index];\n            this[key] = options[key];\n        }\n        if (this.encoding) this.setEncoding(this.encoding);\n        if (this.start !== undefined) {\n            if (\"number\" !== typeof this.start) {\n                throw TypeError(\"start must be a Number\");\n            }\n            if (this.end === undefined) {\n                this.end = Infinity;\n            } else if (\"number\" !== typeof this.end) {\n                throw TypeError(\"end must be a Number\");\n            }\n            if (this.start > this.end) {\n                throw new Error(\"start must be <= end\");\n            }\n            this.pos = this.start;\n        }\n        if (this.fd !== null) {\n            process.nextTick(function() {\n                self._read();\n            });\n            return;\n        }\n        fs.open(this.path, this.flags, this.mode, function(err, fd) {\n            if (err) {\n                self.emit(\"error\", err);\n                self.readable = false;\n                return;\n            }\n            self.fd = fd;\n            self.emit(\"open\", fd);\n            self._read();\n        });\n    }\n    function WriteStream(path, options) {\n        if (!(this instanceof WriteStream)) return new WriteStream(path, options);\n        Stream.call(this);\n        this.path = path;\n        this.fd = null;\n        this.writable = true;\n        this.flags = \"w\";\n        this.encoding = \"binary\";\n        this.mode = 438; /*=0666*/ \n        this.bytesWritten = 0;\n        options = options || {};\n        // Mixin options into this\n        var keys = Object.keys(options);\n        for(var index = 0, length = keys.length; index < length; index++){\n            var key = keys[index];\n            this[key] = options[key];\n        }\n        if (this.start !== undefined) {\n            if (\"number\" !== typeof this.start) {\n                throw TypeError(\"start must be a Number\");\n            }\n            if (this.start < 0) {\n                throw new Error(\"start must be >= zero\");\n            }\n            this.pos = this.start;\n        }\n        this.busy = false;\n        this._queue = [];\n        if (this.fd === null) {\n            this._open = fs.open;\n            this._queue.push([\n                this._open,\n                this.path,\n                this.flags,\n                this.mode,\n                undefined\n            ]);\n            this.flush();\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvbGVnYWN5LXN0cmVhbXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFNBQVNDLG9EQUF3QjtBQUVyQ0MsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxPQUFRQyxFQUFFO0lBQ2pCLE9BQU87UUFDTEMsWUFBWUE7UUFDWkMsYUFBYUE7SUFDZjtJQUVBLFNBQVNELFdBQVlFLElBQUksRUFBRUMsT0FBTztRQUNoQyxJQUFJLENBQUUsS0FBSSxZQUFZSCxVQUFTLEdBQUksT0FBTyxJQUFJQSxXQUFXRSxNQUFNQztRQUUvRFQsT0FBT1UsSUFBSSxDQUFDLElBQUk7UUFFaEIsSUFBSUMsT0FBTyxJQUFJO1FBRWYsSUFBSSxDQUFDSCxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDSSxFQUFFLEdBQUc7UUFDVixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUVkLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxPQUFPO1FBQ3hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEtBQUs7UUFFdkJSLFVBQVVBLFdBQVcsQ0FBQztRQUV0QiwwQkFBMEI7UUFDMUIsSUFBSVMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDVDtRQUN2QixJQUFLLElBQUlXLFFBQVEsR0FBR0MsU0FBU0gsS0FBS0csTUFBTSxFQUFFRCxRQUFRQyxRQUFRRCxRQUFTO1lBQ2pFLElBQUlFLE1BQU1KLElBQUksQ0FBQ0UsTUFBTTtZQUNyQixJQUFJLENBQUNFLElBQUksR0FBR2IsT0FBTyxDQUFDYSxJQUFJO1FBQzFCO1FBRUEsSUFBSSxJQUFJLENBQUNDLFFBQVEsRUFBRSxJQUFJLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUNELFFBQVE7UUFFakQsSUFBSSxJQUFJLENBQUNFLEtBQUssS0FBS0MsV0FBVztZQUM1QixJQUFJLGFBQWEsT0FBTyxJQUFJLENBQUNE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cmFjZWZ1bC1mcy9sZWdhY3ktc3RyZWFtcy5qcz8xZWE4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW1cblxubW9kdWxlLmV4cG9ydHMgPSBsZWdhY3lcblxuZnVuY3Rpb24gbGVnYWN5IChmcykge1xuICByZXR1cm4ge1xuICAgIFJlYWRTdHJlYW06IFJlYWRTdHJlYW0sXG4gICAgV3JpdGVTdHJlYW06IFdyaXRlU3RyZWFtXG4gIH1cblxuICBmdW5jdGlvbiBSZWFkU3RyZWFtIChwYXRoLCBvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRTdHJlYW0pKSByZXR1cm4gbmV3IFJlYWRTdHJlYW0ocGF0aCwgb3B0aW9ucyk7XG5cbiAgICBTdHJlYW0uY2FsbCh0aGlzKTtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgdGhpcy5mZCA9IG51bGw7XG4gICAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuZmxhZ3MgPSAncic7XG4gICAgdGhpcy5tb2RlID0gNDM4OyAvKj0wNjY2Ki9cbiAgICB0aGlzLmJ1ZmZlclNpemUgPSA2NCAqIDEwMjQ7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIE1peGluIG9wdGlvbnMgaW50byB0aGlzXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgdGhpc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVuY29kaW5nKSB0aGlzLnNldEVuY29kaW5nKHRoaXMuZW5jb2RpbmcpO1xuXG4gICAgaWYgKHRoaXMuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgdGhpcy5zdGFydCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ3N0YXJ0IG11c3QgYmUgYSBOdW1iZXInKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuZW5kID0gSW5maW5pdHk7XG4gICAgICB9IGVsc2UgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgdGhpcy5lbmQpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdlbmQgbXVzdCBiZSBhIE51bWJlcicpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zdGFydCA+IHRoaXMuZW5kKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhcnQgbXVzdCBiZSA8PSBlbmQnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3MgPSB0aGlzLnN0YXJ0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZkICE9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLl9yZWFkKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmcy5vcGVuKHRoaXMucGF0aCwgdGhpcy5mbGFncywgdGhpcy5tb2RlLCBmdW5jdGlvbiAoZXJyLCBmZCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgc2VsZi5yZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuZmQgPSBmZDtcbiAgICAgIHNlbGYuZW1pdCgnb3BlbicsIGZkKTtcbiAgICAgIHNlbGYuX3JlYWQoKTtcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gV3JpdGVTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV3JpdGVTdHJlYW0pKSByZXR1cm4gbmV3IFdyaXRlU3RyZWFtKHBhdGgsIG9wdGlvbnMpO1xuXG4gICAgU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIHRoaXMuZmQgPSBudWxsO1xuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gICAgdGhpcy5mbGFncyA9ICd3JztcbiAgICB0aGlzLmVuY29kaW5nID0gJ2JpbmFyeSc7XG4gICAgdGhpcy5tb2RlID0gNDM4OyAvKj0wNjY2Ki9cbiAgICB0aGlzLmJ5dGVzV3JpdHRlbiA9IDA7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIE1peGluIG9wdGlvbnMgaW50byB0aGlzXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgdGhpc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHRoaXMuc3RhcnQpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdzdGFydCBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGFydCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGFydCBtdXN0IGJlID49IHplcm8nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3MgPSB0aGlzLnN0YXJ0O1xuICAgIH1cblxuICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xuICAgIHRoaXMuX3F1ZXVlID0gW107XG5cbiAgICBpZiAodGhpcy5mZCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fb3BlbiA9IGZzLm9wZW47XG4gICAgICB0aGlzLl9xdWV1ZS5wdXNoKFt0aGlzLl9vcGVuLCB0aGlzLnBhdGgsIHRoaXMuZmxhZ3MsIHRoaXMubW9kZSwgdW5kZWZpbmVkXSk7XG4gICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiU3RyZWFtIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJsZWdhY3kiLCJmcyIsIlJlYWRTdHJlYW0iLCJXcml0ZVN0cmVhbSIsInBhdGgiLCJvcHRpb25zIiwiY2FsbCIsInNlbGYiLCJmZCIsInJlYWRhYmxlIiwicGF1c2VkIiwiZmxhZ3MiLCJtb2RlIiwiYnVmZmVyU2l6ZSIsImtleXMiLCJPYmplY3QiLCJpbmRleCIsImxlbmd0aCIsImtleSIsImVuY29kaW5nIiwic2V0RW5jb2RpbmciLCJzdGFydCIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsImVuZCIsIkluZmluaXR5IiwiRXJyb3IiLCJwb3MiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJfcmVhZCIsIm9wZW4iLCJlcnIiLCJlbWl0Iiwid3JpdGFibGUiLCJieXRlc1dyaXR0ZW4iLCJidXN5IiwiX3F1ZXVlIiwiX29wZW4iLCJwdXNoIiwiZmx1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graceful-fs/legacy-streams.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graceful-fs/polyfills.js":
/*!***********************************************!*\
  !*** ./node_modules/graceful-fs/polyfills.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar constants = __webpack_require__(/*! constants */ \"constants\");\nvar origCwd = process.cwd;\nvar cwd = null;\nvar platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;\nprocess.cwd = function() {\n    if (!cwd) cwd = origCwd.call(process);\n    return cwd;\n};\ntry {\n    process.cwd();\n} catch (er) {}\n// This check is needed until node.js 12 is required\nif (typeof process.chdir === \"function\") {\n    var chdir = process.chdir;\n    process.chdir = function(d) {\n        cwd = null;\n        chdir.call(process, d);\n    };\n    if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);\n}\nmodule.exports = patch;\nfunction patch(fs) {\n    // (re-)implement some things that are known busted or missing.\n    // lchmod, broken prior to 0.6.2\n    // back-port the fix here.\n    if (constants.hasOwnProperty(\"O_SYMLINK\") && process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n        patchLchmod(fs);\n    }\n    // lutimes implementation, or no-op\n    if (!fs.lutimes) {\n        patchLutimes(fs);\n    }\n    // https://github.com/isaacs/node-graceful-fs/issues/4\n    // Chown should not fail on einval or eperm if non-root.\n    // It should not fail on enosys ever, as this just indicates\n    // that a fs doesn't support the intended operation.\n    fs.chown = chownFix(fs.chown);\n    fs.fchown = chownFix(fs.fchown);\n    fs.lchown = chownFix(fs.lchown);\n    fs.chmod = chmodFix(fs.chmod);\n    fs.fchmod = chmodFix(fs.fchmod);\n    fs.lchmod = chmodFix(fs.lchmod);\n    fs.chownSync = chownFixSync(fs.chownSync);\n    fs.fchownSync = chownFixSync(fs.fchownSync);\n    fs.lchownSync = chownFixSync(fs.lchownSync);\n    fs.chmodSync = chmodFixSync(fs.chmodSync);\n    fs.fchmodSync = chmodFixSync(fs.fchmodSync);\n    fs.lchmodSync = chmodFixSync(fs.lchmodSync);\n    fs.stat = statFix(fs.stat);\n    fs.fstat = statFix(fs.fstat);\n    fs.lstat = statFix(fs.lstat);\n    fs.statSync = statFixSync(fs.statSync);\n    fs.fstatSync = statFixSync(fs.fstatSync);\n    fs.lstatSync = statFixSync(fs.lstatSync);\n    // if lchmod/lchown do not exist, then make them no-ops\n    if (fs.chmod && !fs.lchmod) {\n        fs.lchmod = function(path, mode, cb) {\n            if (cb) process.nextTick(cb);\n        };\n        fs.lchmodSync = function() {};\n    }\n    if (fs.chown && !fs.lchown) {\n        fs.lchown = function(path, uid, gid, cb) {\n            if (cb) process.nextTick(cb);\n        };\n        fs.lchownSync = function() {};\n    }\n    // on Windows, A/V software can lock the directory, causing this\n    // to fail with an EACCES or EPERM if the directory contains newly\n    // created files.  Try again on failure, for up to 60 seconds.\n    // Set the timeout this long because some Windows Anti-Virus, such as Parity\n    // bit9, may lock files for up to a minute, causing npm package install\n    // failures. Also, take care to yield the scheduler. Windows scheduling gives\n    // CPU to a busy looping process, which can cause the program causing the lock\n    // contention to be starved of CPU by node, so the contention doesn't resolve.\n    if (platform === \"win32\") {\n        fs.rename = typeof fs.rename !== \"function\" ? fs.rename : function(fs$rename) {\n            function rename(from, to, cb) {\n                var start = Date.now();\n                var backoff = 0;\n                fs$rename(from, to, function CB(er) {\n                    if (er && (er.code === \"EACCES\" || er.code === \"EPERM\" || er.code === \"EBUSY\") && Date.now() - start < 60000) {\n                        setTimeout(function() {\n                            fs.stat(to, function(stater, st) {\n                                if (stater && stater.code === \"ENOENT\") fs$rename(from, to, CB);\n                                else cb(er);\n                            });\n                        }, backoff);\n                        if (backoff < 100) backoff += 10;\n                        return;\n                    }\n                    if (cb) cb(er);\n                });\n            }\n            if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename);\n            return rename;\n        }(fs.rename);\n    }\n    // if read() returns EAGAIN, then just try it again.\n    fs.read = typeof fs.read !== \"function\" ? fs.read : function(fs$read) {\n        function read(fd, buffer, offset, length, position, callback_) {\n            var callback;\n            if (callback_ && typeof callback_ === \"function\") {\n                var eagCounter = 0;\n                callback = function(er, _, __) {\n                    if (er && er.code === \"EAGAIN\" && eagCounter < 10) {\n                        eagCounter++;\n                        return fs$read.call(fs, fd, buffer, offset, length, position, callback);\n                    }\n                    callback_.apply(this, arguments);\n                };\n            }\n            return fs$read.call(fs, fd, buffer, offset, length, position, callback);\n        }\n        // This ensures `util.promisify` works as it does for native `fs.read`.\n        if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);\n        return read;\n    }(fs.read);\n    fs.readSync = typeof fs.readSync !== \"function\" ? fs.readSync : function(fs$readSync) {\n        return function(fd, buffer, offset, length, position) {\n            var eagCounter = 0;\n            while(true){\n                try {\n                    return fs$readSync.call(fs, fd, buffer, offset, length, position);\n                } catch (er) {\n                    if (er.code === \"EAGAIN\" && eagCounter < 10) {\n                        eagCounter++;\n                        continue;\n                    }\n                    throw er;\n                }\n            }\n        };\n    }(fs.readSync);\n    function patchLchmod(fs) {\n        fs.lchmod = function(path, mode, callback) {\n            fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {\n                if (err) {\n                    if (callback) callback(err);\n                    return;\n                }\n                // prefer to return the chmod error, if one occurs,\n                // but still try to close, and report closing errors if they occur.\n                fs.fchmod(fd, mode, function(err) {\n                    fs.close(fd, function(err2) {\n                        if (callback) callback(err || err2);\n                    });\n                });\n            });\n        };\n        fs.lchmodSync = function(path, mode) {\n            var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);\n            // prefer to return the chmod error, if one occurs,\n            // but still try to close, and report closing errors if they occur.\n            var threw = true;\n            var ret;\n            try {\n                ret = fs.fchmodSync(fd, mode);\n                threw = false;\n            } finally{\n                if (threw) {\n                    try {\n                        fs.closeSync(fd);\n                    } catch (er) {}\n                } else {\n                    fs.closeSync(fd);\n                }\n            }\n            return ret;\n        };\n    }\n    function patchLutimes(fs) {\n        if (constants.hasOwnProperty(\"O_SYMLINK\") && fs.futimes) {\n            fs.lutimes = function(path, at, mt, cb) {\n                fs.open(path, constants.O_SYMLINK, function(er, fd) {\n                    if (er) {\n                        if (cb) cb(er);\n                        return;\n                    }\n                    fs.futimes(fd, at, mt, function(er) {\n                        fs.close(fd, function(er2) {\n                            if (cb) cb(er || er2);\n                        });\n                    });\n                });\n            };\n            fs.lutimesSync = function(path, at, mt) {\n                var fd = fs.openSync(path, constants.O_SYMLINK);\n                var ret;\n                var threw = true;\n                try {\n                    ret = fs.futimesSync(fd, at, mt);\n                    threw = false;\n                } finally{\n                    if (threw) {\n                        try {\n                            fs.closeSync(fd);\n                        } catch (er) {}\n                    } else {\n                        fs.closeSync(fd);\n                    }\n                }\n                return ret;\n            };\n        } else if (fs.futimes) {\n            fs.lutimes = function(_a, _b, _c, cb) {\n                if (cb) process.nextTick(cb);\n            };\n            fs.lutimesSync = function() {};\n        }\n    }\n    function chmodFix(orig) {\n        if (!orig) return orig;\n        return function(target, mode, cb) {\n            return orig.call(fs, target, mode, function(er) {\n                if (chownErOk(er)) er = null;\n                if (cb) cb.apply(this, arguments);\n            });\n        };\n    }\n    function chmodFixSync(orig) {\n        if (!orig) return orig;\n        return function(target, mode) {\n            try {\n                return orig.call(fs, target, mode);\n            } catch (er) {\n                if (!chownErOk(er)) throw er;\n            }\n        };\n    }\n    function chownFix(orig) {\n        if (!orig) return orig;\n        return function(target, uid, gid, cb) {\n            return orig.call(fs, target, uid, gid, function(er) {\n                if (chownErOk(er)) er = null;\n                if (cb) cb.apply(this, arguments);\n            });\n        };\n    }\n    function chownFixSync(orig) {\n        if (!orig) return orig;\n        return function(target, uid, gid) {\n            try {\n                return orig.call(fs, target, uid, gid);\n            } catch (er) {\n                if (!chownErOk(er)) throw er;\n            }\n        };\n    }\n    function statFix(orig) {\n        if (!orig) return orig;\n        // Older versions of Node erroneously returned signed integers for\n        // uid + gid.\n        return function(target, options, cb) {\n            if (typeof options === \"function\") {\n                cb = options;\n                options = null;\n            }\n            function callback(er, stats) {\n                if (stats) {\n                    if (stats.uid < 0) stats.uid += 0x100000000;\n                    if (stats.gid < 0) stats.gid += 0x100000000;\n                }\n                if (cb) cb.apply(this, arguments);\n            }\n            return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);\n        };\n    }\n    function statFixSync(orig) {\n        if (!orig) return orig;\n        // Older versions of Node erroneously returned signed integers for\n        // uid + gid.\n        return function(target, options) {\n            var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);\n            if (stats) {\n                if (stats.uid < 0) stats.uid += 0x100000000;\n                if (stats.gid < 0) stats.gid += 0x100000000;\n            }\n            return stats;\n        };\n    }\n    // ENOSYS means that the fs doesn't support the op. Just ignore\n    // that, because it doesn't matter.\n    //\n    // if there's no getuid, or if getuid() is something other\n    // than 0, and the error is EINVAL or EPERM, then just ignore\n    // it.\n    //\n    // This specific case is a silent failure in cp, install, tar,\n    // and most other unix tools that manage permissions.\n    //\n    // When running as root, or if other types of errors are\n    // encountered, then it's strict.\n    function chownErOk(er) {\n        if (!er) return true;\n        if (er.code === \"ENOSYS\") return true;\n        var nonroot = !process.getuid || process.getuid() !== 0;\n        if (nonroot) {\n            if (er.code === \"EINVAL\" || er.code === \"EPERM\") return true;\n        }\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graceful-fs/polyfills.js\n");

/***/ })

};
;